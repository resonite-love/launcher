name: Release Portable

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
  workflow_dispatch:

jobs:
  release-portable:
    # Only run if the Release workflow completed successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # For workflow_run events, we need to checkout the tag that triggered the original workflow
          ref: ${{ github.event.workflow_run.head_sha || github.ref }}
          fetch-depth: 0  # Fetch all history and tags
      
      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "Running in workflow_run mode"
            echo "Triggering workflow: ${{ github.event.workflow_run.name }}"
            echo "Head SHA: ${{ github.event.workflow_run.head_sha }}"
            echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
            
            # Method 1: Use GitHub API to get tag for specific commit
            echo "Fetching tag from GitHub API..."
            TAGS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/git/refs/tags")
            
            # Find tag that points to the trigger commit
            TAG_NAME=$(echo "$TAGS_RESPONSE" | jq -r --arg sha "${{ github.event.workflow_run.head_sha }}" \
              '.[] | select(.object.sha == $sha) | .ref | sub("refs/tags/"; "")')
            
            echo "Tag from API: '$TAG_NAME'"
            
            if [ -z "$TAG_NAME" ] || [ "$TAG_NAME" = "null" ]; then
              echo "No direct tag found, checking for annotated tags..."
              
              # Check for annotated tags (they have a different SHA)
              for tag_ref in $(echo "$TAGS_RESPONSE" | jq -r '.[].ref'); do
                tag_name=$(echo "$tag_ref" | sed 's|refs/tags/||')
                tag_sha=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/git/tags/$tag_name" | \
                  jq -r '.object.sha // empty' 2>/dev/null)
                
                if [ "$tag_sha" = "${{ github.event.workflow_run.head_sha }}" ]; then
                  TAG_NAME="$tag_name"
                  echo "Found annotated tag: $TAG_NAME"
                  break
                fi
              done
            fi
            
            if [ -z "$TAG_NAME" ] || [ "$TAG_NAME" = "null" ]; then
              echo "Fallback: checking local git tags after fetch"
              git fetch --tags
              TAG_NAME=$(git tag --points-at ${{ github.event.workflow_run.head_sha }} | head -1)
              echo "Local git tag: '$TAG_NAME'"
            fi
            
            if [ -z "$TAG_NAME" ] || [ "$TAG_NAME" = "null" ]; then
              echo "Final fallback: using head branch name as potential tag"
              if [[ "${{ github.event.workflow_run.head_branch }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                TAG_NAME="${{ github.event.workflow_run.head_branch }}"
                echo "Using branch name as tag: $TAG_NAME"
              else
                echo "ERROR: Could not determine tag name"
                echo "Available workflow_run data:"
                echo "  Head SHA: ${{ github.event.workflow_run.head_sha }}"
                echo "  Head branch: ${{ github.event.workflow_run.head_branch }}"
                echo "  Event: ${{ github.event.workflow_run.event }}"
                echo "Available local tags:"
                git tag -l | head -10
                exit 1
              fi
            fi
          else
            # For workflow_dispatch or direct tag push
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "Tag from ref: $TAG_NAME"
          fi
          
          echo "Final tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Using tag: $TAG_NAME"
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./gui

      # Build frontend
      - name: Build Frontend
        run: npm run build
        working-directory: ./gui
          
      # Build GUI executable for portable version with auto-update disabled
      - name: Build GUI executable (portable)
        run: |
          Write-Host "=== Building GUI executable for portable version ==="
          Write-Host "Current directory: $(Get-Location)"
          
          # Set environment variable to disable auto-update
          $env:TAURI_UPDATER_ACTIVE = "false"
          Write-Host "TAURI_UPDATER_ACTIVE set to: $env:TAURI_UPDATER_ACTIVE"
          
          cd gui/src-tauri
          Write-Host "Changed to directory: $(Get-Location)"
          
          Write-Host "`nBuilding with cargo..."
          cargo build --release --features custom-protocol
          
          Write-Host "`n=== Build complete ===="
          
          # Return to root directory
          cd ..\..
        shell: pwsh
        
      - name: Debug Build Results
        run: |
          Write-Host "=== Debugging build results ==="
          Write-Host "Current directory: $(Get-Location)"
          
          Write-Host "`n=== Root directory contents ==="
          Get-ChildItem -Path "." | Select-Object Mode, LastWriteTime, Length, Name | Format-Table -AutoSize
          
          Write-Host "`n=== Target directory contents ==="
          if (Test-Path ".\target") {
            Get-ChildItem -Path ".\target" -Recurse | Where-Object { $_.Name -like "*.exe" } | Select-Object FullName, Length | Format-Table -AutoSize
          } else {
            Write-Host "No target directory found"
          }
          
          Write-Host "`n=== GUI src-tauri target directory contents ==="
          if (Test-Path ".\gui\src-tauri\target") {
            Get-ChildItem -Path ".\gui\src-tauri\target" -Recurse | Where-Object { $_.Name -like "*.exe" } | Select-Object FullName, Length | Format-Table -AutoSize
          } else {
            Write-Host "No gui/src-tauri/target directory found"
          }
          
          Write-Host "`n=== All EXE files in the workspace ==="
          Get-ChildItem -Path "." -Recurse -Filter "*.exe" -ErrorAction SilentlyContinue | Select-Object FullName, Length, LastWriteTime | Format-Table -AutoSize
          
          Write-Host "`n=== GUI directory contents ==="
          if (Test-Path ".\gui") {
            Get-ChildItem -Path ".\gui" | Select-Object Mode, LastWriteTime, Name | Format-Table -AutoSize
          }
        shell: pwsh
        
      - name: Create Portable Package
        run: |
          Write-Host "=== Creating portable package ==="
          
          # The executable is named "RESO Launcher.exe" with spaces
          $exePath = "./target/release/deps/reso_launcher.exe"
          
          if (Test-Path $exePath) {
            Write-Host "Found executable at: $exePath"
            $fileSize = (Get-Item $exePath).Length / 1MB
            Write-Host "File size: $([math]::Round($fileSize, 2)) MB"
            
            # Create portable directory
            $portableDir = ".\reso-launcher-portable"
            New-Item -ItemType Directory -Force -Path $portableDir | Out-Null
            
            # Copy the executable
            $portableExeName = "RESO Launcher Portable.exe"
            cp $exePath "$portableDir\$portableExeName"
            Write-Host "Copied executable to: $portableDir\$portableExeName"
            
            # Create version file
            $version = "${{ steps.get_tag.outputs.tag_name }}"
            $version | Out-File -FilePath "$portableDir\version.txt" -Encoding UTF8
            
            # Create ZIP file
            $zipName = "reso-launcher-${{ steps.get_tag.outputs.tag_name }}-windows-portable.zip"
            Compress-Archive -Path "$portableDir\*" -DestinationPath ".\$zipName" -Force
            Write-Host "Created portable ZIP: $zipName"
            
            # Verify ZIP contents
            $zipSize = (Get-Item ".\$zipName").Length / 1MB
            Write-Host "ZIP file size: $([math]::Round($zipSize, 2)) MB"

            # Copy the portable executable to the root directory
            $portableExePath = ".\reso-launcher-${{ steps.get_tag.outputs.tag_name }}-windows-portable.exe"
            Copy-Item -Path "$portableDir\$portableExeName" -Destination $portableExePath -Force
            
          } else {
            Write-Error "GUI executable not found at expected location: $exePath"
            exit 1
          }
        shell: pwsh

      - name: Upload portable version to existing release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./reso-launcher-${{ steps.get_tag.outputs.tag_name }}-windows-portable.exe
            ./reso-launcher-${{ steps.get_tag.outputs.tag_name }}-windows-portable.zip
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          append_body: true
          body: |
            
            ## üì¶ Portable Version
            
            „Éù„Éº„Çø„Éñ„É´Áâà„ÅÆRESO„É©„É≥„ÉÅ„É£„Éº„ÅåËøΩÂä†„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç™„Éó„Ç∑„Éß„É≥„Å®„Åó„Å¶Âà©Áî®ÂèØËÉΩ„Åß„Åô„ÄÇ
            
            - **„Éï„Ç°„Ç§„É´**: `reso-launcher-${{ steps.get_tag.outputs.tag_name }}-windows-portable.zip`
            - **Ê©üËÉΩ**: „Ç§„É≥„Çπ„Éà„Éº„É´‰∏çË¶Å„ÄÅËá™Âãï„Ç¢„ÉÉ„Éó„Éá„Éº„ÉàÁÑ°Âäπ
            - **‰ΩøÁî®ÊñπÊ≥ï**: ZIP„ÇíÂ±ïÈñã„Åó„Å¶"RESO Launcher Portable.exe"„ÇíÂÆüË°å
            - **ÁâπÂæ¥**: Ë®≠ÂÆö„Å®„Éá„Éº„Çø„Çí„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Éï„Ç©„É´„ÉÄ„Å´‰øùÂ≠ò
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}